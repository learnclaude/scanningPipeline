version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: filename-generator-nginx-staging
    ports:
      - "18093:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
    depends_on:
      app:
        condition: service_healthy
    networks:
      - staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
        labels: "service=nginx,env=staging"

  image-watcher:
    image: alpine:latest
    container_name: filename-generator-image-watcher
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      DOCKER_REGISTRY: ${DOCKER_REGISTRY:-docker.io}
      DOCKER_IMAGE: ${DOCKER_IMAGE:-filename-generator}
      STAGING_TAG: ${STAGING_TAG:-test-latest}
      WEBHOOK_URL: ${STAGING_WEBHOOK_URL}
    command: |
      sh -c "
        apk add --no-cache docker-cli curl jq &&
        echo 'Starting image watcher for staging auto-deployment...' &&
        while true; do
          echo 'Checking for new images...' &&
          LATEST_IMAGE=$$DOCKER_REGISTRY/$$DOCKER_IMAGE:$$STAGING_TAG &&
          
          # Pull latest image
          docker pull $$LATEST_IMAGE 2>/dev/null || echo 'Failed to pull image' &&
          
          # Get current running image ID
          CURRENT_ID=\$$(docker inspect filename-generator-staging --format='{{.Image}}' 2>/dev/null || echo 'none') &&
          LATEST_ID=\$$(docker inspect $$LATEST_IMAGE --format='{{.Id}}' 2>/dev/null || echo 'none') &&
          
          if [ \"$$CURRENT_ID\" != \"$$LATEST_ID\" ] && [ \"$$LATEST_ID\" != 'none' ]; then
            echo 'New image detected! Triggering staging deployment...' &&
            if [ -n \"$$WEBHOOK_URL\" ]; then
              curl -X POST $$WEBHOOK_URL -H 'Content-Type: application/json' \
                -d '{\"action\":\"redeploy\",\"service\":\"staging\",\"image\":\"'$$LATEST_IMAGE'\"}' || echo 'Webhook failed'
            fi &&
            docker compose -f docker-compose.staging.yml up -d app --no-deps || echo 'Redeploy failed'
          fi &&
          
          sleep 300  # Check every 5 minutes
        done
      "
    networks:
      - staging-network
    restart: unless-stopped

  app:
    image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_IMAGE:-filename-generator}:${STAGING_TAG:-test-latest}
    container_name: filename-generator-staging
    # No external ports - only accessible via nginx
    expose:
      - "3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_API_URL: ${STAGING_API_URL:-https://staging.example.com/api}
      # Staging-specific environment variables
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      ENABLE_MONITORING: ${ENABLE_MONITORING:-true}
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: staging
    restart: unless-stopped
    networks:
      - staging-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=filename-generator,env=staging"

networks:
  staging-network:
    driver: bridge
    internal: false
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  nginx-cache:
    driver: local