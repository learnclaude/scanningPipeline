name: CD Pipeline - Docker Build & Deploy

on:
  push:
    branches:
      - test
      - main
  pull_request:
    branches:
      - test
      - main

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: filename-generator
  NODE_VERSION: '18'

jobs:
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run type checking
        run: npm run type-check
        
      - name: Run tests with coverage
        run: npm run test:coverage
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false
          
      - name: Build application
        run: npm run build
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=test-latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_ID=${{ github.run_number }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            
      - name: Trigger staging deployment
        if: success()
        run: |
          echo "Test passed! Image pushed to Docker Hub."
          echo "Staging will auto-deploy the new image."
          
  promote-to-production:
    name: Promote to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: []
    environment: production
    
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Pull and retag for production
        run: |
          # Pull the tested image from test-latest
          docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:test-latest
          
          # Tag for production
          docker tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:test-latest \
                     ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:prod
          docker tag ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:test-latest \
                     ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:prod-${{ github.run_number }}
          
          # Push production tags
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:prod
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:prod-${{ github.run_number }}
          
      - name: Notify production deployment
        run: |
          echo "Production image tagged and pushed!"
          echo "Production watcher will detect and request manual approval."
          
      - name: Send Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              text: "ðŸš€ Production deployment ready for filename-generator",
              attachments: [{
                color: "${{ job.status }}" === "success" ? "good" : "danger",
                fields: [{
                  title: "Status",
                  value: "${{ job.status }}",
                  short: true
                }, {
                  title: "Branch",
                  value: "${{ github.ref_name }}",
                  short: true
                }, {
                  title: "Commit",
                  value: "${{ github.sha }}",
                  short: true
                }]
              }]
            }

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'